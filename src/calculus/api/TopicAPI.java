package calculus.api;

import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;

import calculus.models.Topic;

public class TopicAPI {

	public static void assignTopicDifficulty(Topic t, int difficulty){
		t.setDifficulty(difficulty);
		t.save();
	}
	
	public static void makeTopicAParent(Topic parent, Topic child){
		parent.addSubTopic(child.getUuid());
		child.addParentTopic(parent.getUuid());
		parent.save();
		child.save();
	}
	
	public static Topic getTopicByName(String name){
		Entity mapping = Topic.getTopicTitleMapping();
		Topic t;
		try {
			t = new Topic((String) mapping.getProperty(name));
		} catch (EntityNotFoundException e) {
			return null;
		}
		return t;
	}
	
	public static Topic getTopicByUUID(String uuid){
		try {
			return new Topic(uuid);
		} catch (EntityNotFoundException e) {
			return null;
		}
	}
	
	public static void createTopicFromUrl(String topicUrl, String shortDescription, String longDescription, String tags){
		String[] topicTitles = topicUrl.split("/");
		
		Topic[] topics = new Topic[topicTitles.length];
		boolean[] newTopic = new boolean[topicTitles.length];
		
		for (int i = 0; i < topicTitles.length; i++){
			topics[i] = getTopicByName(topicTitles[i]);
			if (topicTitles[i] == null && i < topicTitles.length - 1){
				newTopic[i] = true;
				topics[i] = Topic.createNewTopic(topicTitles[i], "AutoGeneratedDescription", "AutoGeneratedDescription", "AutoGeneratedTags");
			} else if (topicTitles[i] == null){
				topics[i] = Topic.createNewTopic(topicTitles[i], shortDescription, longDescription, tags);
			}
		}
		
		for(int i = 1; i < topics.length; i++){
			if (newTopic[i-1] || newTopic[i]){
				topics[i-1].addSubTopic(topics[i].getUuid());
				topics[i].addParentTopic(topics[i-1].getUuid());
			}
		}
		
		for(Topic t : topics){
			t.save();
		}	
	}
	
	public static boolean updateTopicTitle(String uuid, String newTitle){
		Topic t = getTopicByUUID(uuid);
		if (t != null){
			t.setTitle(newTitle);
			t.save();
			return true;
		}
		return false;
	}
	
	public static boolean updateTopicShortDescription(String uuid, String newDescription){
		Topic t = getTopicByUUID(uuid);
		if (t != null){
			t.setShortDescription(newDescription);
			t.save();
			return true;
		}
		return false;
	}
	
	public static boolean updateTopicLongDescription(String uuid, String newDescription){
		Topic t = getTopicByUUID(uuid);
		if (t != null){
			t.setLongDescription(newDescription);
			t.save();
			return true;
		}
		return false;
	}
	
	public static boolean updateTopicTags(String uuid, String newTags){
		Topic t = getTopicByUUID(uuid);
		if (t != null){
			t.setTags(newTags);
			t.save();
			return true;
		}
		return false;
	}
	
	public static boolean updateTopicDifficulty(String uuid, int newDifficulty){
		Topic t = getTopicByUUID(uuid);
		if (t != null){
			t.setDifficulty(newDifficulty);
			t.save();
			return true;
		}
		return false;
	}
	
}
